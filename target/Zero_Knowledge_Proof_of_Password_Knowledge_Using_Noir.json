{"noir_version":"1.0.0-beta.5+944d23430d2746e25980ca283160f13665f123c3","hash":"10283699963154218338","abi":{"parameters":[{"name":"secret","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"expected_hash","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"H4sIAAAAAAAA/9Wa127iYBCFIdmS7b03Qnq3sQ12GqT33ruClrz/I+wcAdIoOtJe7OzFWDoCfShIn5IczD+TzzWvG8lt63le0tl6xNV1j+UJ6yCsk7AHhD0k7BFhjwnrIuwJYU8Je0bYc8JeEPaSsFeEvSbsDWFvCXtH2HvCPhD2kbBPhH0m7AthXwn7Rth3wn4Q9pOwX4QVCOsmrEhYD2G9hPUR1k/YAGGDhA0RNkzYCGGjhI0RNk7YBGEBYSFhJcIiwmLCEsLKhFUISwnLCJskbIqwacJmCJslrKoYeqqQa1751mP7tbx6fr/39M+3n+t+072m+0z3mO4v3Vu6r3RP6X7SvaT7SPeQ7h/dO7pvdM/oftG9ovtE94juD90bui90T+h+0L3Q7oOaZE4yL1mQLEqWJMuSFcmqZE2yLtmQbEq2JNuSHcmuZE+yLzmQHEqOJMeSE8mp5ExyLrmQXEquJNe55ueivjpaj7XWYxSU47hRKTXCKLwNSlk9TYI4qZfTMA2TNPldSqOokcZpJatnlSAL46gR3iVZdBc0r4J6r+DfrrBm917B/3TuNnSec+JcNHSed+LcY+i84MS519B50Ylzn6HzkhPnfkPnZSfOA4bOK06cBw2dV504Dxk6rzlxHjZ0XnfiPGLovOHEedTQedOJ85ih85YT53FD520nzhOGzjtOnAND510nzqGh854T55Kh874T58jQ+cCJc2zofOjEOTF0PnLiXDZ0PnbiXDF0PnHinBo6nzpxzgydz5w4Txo6nztxnjJ0vnDiPG3ofOnEecbQ+cqJ86yh87UT56qh842hc3ufQLviau8fdLZex54B9gvaewXYI8D+APYGsC+APQHsB2AvAPsA2APA/B9zf8z7MefHfB9zfczzMcfH/B5ze8zrMafHfB5z+UKuuYdTzDX3bDD3whwIcxHMCXBujnNknKvinBHnbjiHwrkMzinwi8T3WHyvw/cc3PfjPhj3hbhPwn0DPkfxuYKeRe/g/xB/l9Xc368/cvW1PNgmAAA=","debug_symbols":"jdLBioMwFAXQf8naRUxr8tJfGQaJGksgREl1YBD/vdGrrV20dHU1z3vARybW2Gq8li603Y1dfiZWRee9u5a+q83gupBOpzlj+2s5RGvTETvMU6s30YaBXcLofcb+jB/Xj269CWsOJqYpz5gNTcoEts7b5WnOnm3+vpoXeivnVDzqxdd9IcXWF1q864sPfc7lDvD89BS+B3L1AERxBH7Ti6ldfNk5k+f0rxmTxcpKiVAIQug1FEfkCIE4Ic4IKAqKgqKgKCgEhaAQFIJCUAgKQSEoBIWgaCgaioaioWgoGopelHlZWHSm8na7aO0Y6sO9G/77fbLfzD52tW3GaJd9rbO0wTs=","file_map":{"50":{"source":"// Main function for password proof\nfn main(secret: [u8; 32], expected_hash: [u8; 32]) {\n    // Compute the Blake2s hash of the secret\n    let computed_hash = std::hash::blake2s(secret);\n\n    // Assert that the computed hash matches the expected hash\n    assert(computed_hash == expected_hash);\n}\n\n// Test function to verify password proof\n#[test]\nfn test_password_proof() {\n    // Example password as a 32-byte array (ASCII for \"password\" followed by zeros)\n    let password: [u8; 32] = [112, 97, 115, 115, 119, 111, 114, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n    // Precompute the hash of the password using Blake2s within Noir\n    let expected_hash: [u8; 32] = std::hash::blake2s(password);\n\n    // Call the main function to verify the proof\n    main(password, expected_hash);\n}\n","path":"/home/cyprian/rustprograms/Zero_Knowledge_Proof_of_Password_Knowledge_Using_Noir/src/main.nr"}},"names":["main"],"brillig_names":[]}